############################################################################
#
# SCENARIO 6: Import a volume into Kubernetes
#
############################################################################

GOAL:
This scenario can be used to demonstrate how a volume sitting on ONTAP can be imported into Kubernetes with Trident

The files used in the scenario are all in the directory: https://github.com/YvosOnTheHub/LabNetApp/tree/master/Kubernetes/Scenarios/Scenario6

Prerequisites:
- Trident v19.04 is already installed & configured
- A storage class "storage-class-nas" must already be configured

# tridentctl get backend -n trident
+----------------+----------------+--------+---------+
|      NAME      | STORAGE DRIVER | STATE  | VOLUMES |
+----------------+----------------+--------+---------+
| TridentBackend | ontap-nas      | online |       0 |
+----------------+----------------+--------+---------+



A. Let's start by creating a  volume on the ONTAP system

This can be done via GUI.
In this lab, I would recommend creating a volume, mount it in order to copy some files, and finally clone this volume.
This is to avoid recreating volumes if you start playing around with the containers, and ultimately delete the PVC, which will obvisouly delete the FlexVol by default.
Some files are available in the Apache sub-dir. you can use them in order to later create an app using the imported volume as persistent storage.

On the following steps, I used the names:
- vol_import_origin for the parent volume
- vol_import_clone for the volume that will be imported into Kubernetes

B. Import the volume in Kubernetes

We will use the pvc.apache.yaml file.
Notice that the namespace parameter must be set in this yaml file.

[root@rhel3 Scenario5]# tridentctl import volume TridentBackend vol_import_clone -f pvc-apache.yaml -n trident
+--------------------------+---------+-------------------+----------+----------------+------+
|           NAME           |  SIZE   |   STORAGE CLASS   | PROTOCOL |    BACKEND     | POOL |
+--------------------------+---------+-------------------+----------+----------------+------+
| default-pvc-apache-b0b6b | 1.0 GiB | storage-class-nas | file     | TridentBackend |      |
+--------------------------+---------+-------------------+----------+----------------+------+

Let's check the PVC/PV situation:

# kubectl get pvc,pv
NAME                               STATUS    VOLUME                     CAPACITY     ACCESS MODES   STORAGECLASS        AGE
persistentvolumeclaim/pvc-apache   Bound     default-pvc-apache-b0b6b   1073741824   RWX            storage-class-nas   54s

NAME                                        CAPACITY     ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                STORAGECLASS        REASON    AGE
persistentvolume/default-pvc-apache-b0b6b   1073741824   RWX            Delete           Bound     default/pvc-apache   storage-class-nas             48s
persistentvolume/trident                    2Gi          RWO            Retain           Bound     trident/trident                                    2d

and from a Trident perspective
# tridentctl get volume -n trident
+--------------------------+---------+-------------------+----------+----------------+------+
|           NAME           |  SIZE   |   STORAGE CLASS   | PROTOCOL |    BACKEND     | POOL |
+--------------------------+---------+-------------------+----------+----------------+------+
| default-pvc-apache-b0b6b | 1.0 GiB | storage-class-nas | file     | TridentBackend |      |
+--------------------------+---------+-------------------+----------+----------------+------+

You can notice that the volume has been renamed to respect K8S rules


