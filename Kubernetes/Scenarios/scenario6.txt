############################################################################
#
# SCENARIO 6: Import a volume into Kubernetes
#
############################################################################

GOAL:
This scenario can be used to demonstrate how a volume sitting on ONTAP can be imported into Kubernetes with Trident

The files used in the scenario are all in the directory: https://github.com/YvosOnTheHub/LabNetApp/tree/master/Kubernetes/Scenarios/Scenario6

Prerequisites:
- Trident v19.04 is already installed & configured
- A storage class "storage-class-nas" must already be configured

# tridentctl get backend -n trident
+----------------+----------------+--------+---------+
|      NAME      | STORAGE DRIVER | STATE  | VOLUMES |
+----------------+----------------+--------+---------+
| TridentBackend | ontap-nas      | online |       0 |
+----------------+----------------+--------+---------+



A. Let's start by creating a  volume on the ONTAP system

This can be done via GUI.
In this lab, I would recommend creating a volume, mount it in order to copy some files, and finally clone this volume.
This is to avoid recreating volumes if you start playing around with the containers, and ultimately delete the PVC, which will obvisouly delete the FlexVol by default.
Some files are available in the Apache sub-dir. you can use them in order to later create an app using the imported volume as persistent storage.

On the following steps, I used the names:
- vol_import_origin for the parent volume
- vol_import_clone for the volume that will be imported into Kubernetes

B. Import the volume in Kubernetes

In this exercise, the volume will be managed by Trident.

We will use the pvc.apache.yaml file.
Notice that the namespace parameter must be set in this yaml file.

[root@rhel3 Scenario5]# tridentctl import volume TridentBackend vol_import_clone -f pvc-apache.yaml -n trident
+--------------------------+---------+-------------------+----------+----------------+------+
|           NAME           |  SIZE   |   STORAGE CLASS   | PROTOCOL |    BACKEND     | POOL |
+--------------------------+---------+-------------------+----------+----------------+------+
| default-pvc-apache-b0b6b | 1.0 GiB | storage-class-nas | file     | TridentBackend |      |
+--------------------------+---------+-------------------+----------+----------------+------+

Let's check the PVC/PV situation:

# kubectl get pvc,pv
NAME                               STATUS    VOLUME                     CAPACITY     ACCESS MODES   STORAGECLASS        AGE
persistentvolumeclaim/pvc-apache   Bound     default-pvc-apache-b0b6b   1073741824   RWX            storage-class-nas   54s

NAME                                        CAPACITY     ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                STORAGECLASS        REASON    AGE
persistentvolume/default-pvc-apache-b0b6b   1073741824   RWX            Delete           Bound     default/pvc-apache   storage-class-nas             48s
persistentvolume/trident                    2Gi          RWO            Retain           Bound     trident/trident                                    2d

and from a Trident perspective
# tridentctl get volume -n trident
+--------------------------+---------+-------------------+----------+----------------+------+
|           NAME           |  SIZE   |   STORAGE CLASS   | PROTOCOL |    BACKEND     | POOL |
+--------------------------+---------+-------------------+----------+----------------+------+
| default-pvc-apache-b0b6b | 1.0 GiB | storage-class-nas | file     | TridentBackend |      |
+--------------------------+---------+-------------------+----------+----------------+------+

You can notice that the volume has been renamed to respect K8S rules


C. Launch an Apache server that used this imported volume.

For this, we will create a deployment & a service (cf Scenario5 for more details)

# kubectl create -f deployment-apache.yaml
deployment.apps "apache" created

# kubectl create -f svc-apache.yaml
service "apache" created

# kubectl get deployment -o wide
NAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE       CONTAINERS   IMAGES           SELECTOR
apache    1         1         1            1           15s       apache       php:7.0-apache   app=apache

# kubectl get pod -o wide
NAME                      READY     STATUS    RESTARTS   AGE       IP            NODE
apache-7cb9dd4bbd-9bgn9   1/1       Running   0          24s       10.244.2.11   rhel1

# kubectl get svc -o wide
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE       SELECTOR
apache       NodePort    10.109.86.245   <none>        80:30080/TCP   25s       app=apache
kubernetes   ClusterIP   10.96.0.1       <none>        443/TCP        351d      <none>

if you connect with your browser to the node IP address & the port 30080, you will then access the Apache server and its data imported from an ONTAP system.

This import mechanism can be used for tons of use cases, including legacy app migration, DR, cluster reconstruction ...


D. Import the volume in Kubernetes, without having it managed by Trident

This will be done following the same steps as "B", with the extra parameter --no-manage.
The result will create a PVC/PV in Kubernetes with the imported volume.
Also, the PV will be tagged with the parameter "retain". In this case, if you delete the PVC and then the PV, the volume will remain on the storage.


[root@rhel3 Scenario6]# tridentctl import volume TridentBackend vol_import_clone -f pvc-apache.yaml -n trident --no-manage
+--------------------------+---------+-------------------+----------+----------------+------+
|           NAME           |  SIZE   |   STORAGE CLASS   | PROTOCOL |    BACKEND     | POOL |
+--------------------------+---------+-------------------+----------+----------------+------+
| default-pvc-apache-95330 | 1.0 GiB | storage-class-nas | file     | TridentBackend |      |
+--------------------------+---------+-------------------+----------+----------------+------+
[root@rhel3 Scenario6]#
[root@rhel3 Scenario6]#
[root@rhel3 Scenario6]# tridentctl get volume -n trident
+------+------+---------------+----------+---------+------+
| NAME | SIZE | STORAGE CLASS | PROTOCOL | BACKEND | POOL |
+------+------+---------------+----------+---------+------+
+------+------+---------------+----------+---------+------+
[root@rhel3 Scenario6]# kg pvc,pv
NAME                               STATUS    VOLUME                     CAPACITY     ACCESS MODES   STORAGECLASS        AGE
persistentvolumeclaim/pvc-apache   Bound     default-pvc-apache-95330   1073741824   RWX            storage-class-nas   23s

NAME                                        CAPACITY     ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                STORAGECLASS        REASON    AGE
persistentvolume/default-pvc-apache-95330   1073741824   RWX            Retain           Bound     default/pvc-apache   storage-class-nas             23s
persistentvolume/trident                    2Gi          RWO            Retain           Bound     trident/trident                                    2d

[root@rhel3 Scenario6]# k delete pvc pvc-apache
persistentvolumeclaim "pvc-apache" deleted
[root@rhel3 Scenario6]# kg pvc,pv
NAME                                        CAPACITY     ACCESS MODES   RECLAIM POLICY   STATUS     CLAIM                STORAGECLASS        REASON    AGE
persistentvolume/default-pvc-apache-95330   1073741824   RWX            Retain           Released   default/pvc-apache   storage-class-nas             1m
persistentvolume/trident                    2Gi          RWO            Retain           Bound      trident/trident                                    2d
[root@rhel3 Scenario6]#
[root@rhel3 Scenario6]#
[root@rhel3 Scenario6]#
[root@rhel3 Scenario6]# k delete pv default-pvc-apache-95330
persistentvolume "default-pvc-apache-95330" deleted

