############################################################################
#
# SCENARIO 2: Storage Classes & Backend configuration
#
############################################################################

A. Copy on the docker host the content of the github repo:

cd
git clone https://github.com/YvosOnTheHub/LabNetApp.git


B. Configuration files

Create your own file or use the ones provided in the LabNetApp directory


C. Create some backends

cd /root/LabNetApp/Kubernetes
tridentctl create backend -n trident -f backend-nas-default.json
tridentctl create backend -n trident -f backend-nas-economy-default.json
tridentctl create backend -n trident -f backend-nas-flexgroup-default.json
tridentctl create backend -n trident -f backend-san-ontap-default.json
tridentctl create backend -n trident -f backend-sf.json


D. Check that the backends have been taken into account

[root@rhel3 Kubernetes]# tridentctl get backend -n trident
+-------------------------+---------------------+--------+---------+
|          NAME           |   STORAGE DRIVER    | ONLINE | VOLUMES |
+-------------------------+---------------------+--------+---------+
| BackendForNAS-FlexGroup | ontap-nas-flexgroup | true   |       0 |
| solidfire_192.168.0.130 | solidfire-san       | true   |       0 |
| BackendForBlockONTAP    | ontap-san           | true   |       0 |
| BackendForNAS-Qtree     | ontap-nas-economy   | true   |       0 |
| BackendForNAS-default   | ontap-nas           | true   |       0 |
+-------------------------+---------------------+--------+---------+


E. Create some storage classes

[root@rhel3 Kubernetes]# kubectl create -f sc-ontap-nas.yaml
storageclass.storage.k8s.io "storage-class-nas" created

[root@rhel3 Kubernetes]# kubectl create -f sc-ontap-san.yaml
storageclass.storage.k8s.io "storage-class-san" created

[root@rhel3 Kubernetes]# kubectl create -f sc-ontap-nas-qtree.yaml
storageclass.storage.k8s.io "storage-class-nas-qtree" created

[root@rhel3 Kubernetes]# kubectl create -f sc-ontap-nas-ssd.yaml
storageclass.storage.k8s.io "storage-class-nas-ssd" created

[root@rhel3 Kubernetes]# kubectl create -f sc-ontap-nas-storagepool.yaml
storageclass.storage.k8s.io "storage-class-storagepool" created

[root@rhel3 Kubernetes]# kubectl create -f sc-ontap-nas-flexgroup.yaml
storageclass.storage.k8s.io "storage-class-nas-flexgroup" created

[root@rhel3 Kubernetes]# kubectl create -f sc-solidfire.yaml
storageclass.storage.k8s.io "storage-class-solidfire" created


D. Check that the storage classes have been taken into account

[root@rhel3 Kubernetes]# kubectl get sc
NAME                          PROVISIONER         AGE
storage-class-nas             netapp.io/trident   4m
storage-class-nas-flexgroup   netapp.io/trident   4m
storage-class-nas-qtree       netapp.io/trident   4m
storage-class-nas-ssd         netapp.io/trident   4m
storage-class-ontap-san       netapp.io/trident   2m
storage-class-solidfire       netapp.io/trident   3m
storage-class-storagepool     netapp.io/trident   4m


E. Identify what backends each storage class can use

# tridentctl get storageclass -n trident -o json | jq  '[.items[] | {storageClass: .Config.name, backends: [.storage]|unique}]'
[
  {
    "storageClass": "storage-class-solidfire",
    "backends": [
      {
        "solidfire_192.168.0.130": [
          "Gold",
          "Silver"
        ]
      }
    ]
  },
  {
    "storageClass": "storage-class-ontap-san",
    "backends": [
      {
        "BackendForBlockONTAP": [
          "aggr1",
          "aggr2"
        ]
      }
    ]
  },
  {
    "storageClass": "storage-class-nas",
    "backends": [
      {
        "BackendForNAS-default": [
          "aggr1",
          "aggr2"
        ]
      }
    ]
  },
  {
    "storageClass": "storage-class-nas-qtree",
    "backends": [
      {
        "BackendForNAS-Qtree": [
          "aggr1",
          "aggr2"
        ]
      }
    ]
  },
  {
    "storageClass": "storage-class-nas-ssd",
    "backends": [
      {
        "BackendForNAS-default": [
          "aggr2"
        ]
      }
    ]
  },
  {
    "storageClass": "storage-class-storagepool",
    "backends": [
      {
        "BackendForNAS-default": [
          "aggr1"
        ]
      }
    ]
  },
  {
    "storageClass": "storage-class-nas-flexgroup",
    "backends": [
      {
        "BackendForNAS-FlexGroup": [
          "svm1"
        ]
      }
    ]
  }
]
