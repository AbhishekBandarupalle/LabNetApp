############################################################################
#
# SCENARIO 3: Quota Management with Kubernetes
#
############################################################################

GOAL:
This scenario can be used to demonstrate how to manage quotas from a Kubernetes perspective.
The YAML files used in the scenario are all in the directory: https://github.com/YvosOnTheHub/LabNetApp/tree/master/Kubernetes/Scenarios/Scenario3

PreRequesites:
- ONTAP-NAS backend configured
- Storage Class "storage-class-nas" configured


A. Create a namespace for this exercice

In order to restrict the tests to a small environment & not affect other projects, we will create a specific namespace.

# kubectl create namespace scenario3


B. Create Quotas

We will create 2 types of quotas:
- limit the number of PVC a user can create
- limit the total capacity a user can create

# kubectl create -f ./sc-resource-limit.yaml --namespace=scenario3
resourcequota "sc-count-limit" created

# kubectl create -f ./pvc-count-limit.yaml --namespace=scenario3
resourcequota "pvc-count-limit" created


C. Review the Quotas

# kubectl get resourcequota -n scenario3
NAME                AGE
pvc-count-limit     20s
sc-resource-limit   1m

# kubectl describe quota pvc-count-limit -n scenario3
Name:                                                                 pvc-count-limit
Namespace:                                                            scenario3
Resource                                                              Used  Hard
--------                                                              ----  ----
persistentvolumeclaims                                                0     5
storage-class-nas.storageclass.storage.k8s.io/persistentvolumeclaims  0     3

# kubectl describe quota sc-resource-limit -n scenario3
Name:                                                           sc-resource-limit
Namespace:                                                      scenario3
Resource                                                        Used  Hard
--------                                                        ----  ----
requests.storage                                                0     10Gi
storage-class-nas.storageclass.storage.k8s.io/requests.storage  0     8Gi



D. Play around with PVC Quotas

# kubectl create -f pvc-sc3-1.yaml -n scenario3
persistentvolumeclaim "sc3-1" created
# kubectl create -f pvc-sc3-2.yaml -n scenario3
persistentvolumeclaim "sc3-2" created

# kubectl describe quota pvc-count-limit -n scenario3
Name:                                                                 pvc-count-limit
Namespace:                                                            scenario3
Resource                                                              Used  Hard
--------                                                              ----  ----
persistentvolumeclaims                                                2     5
storage-class-nas.storageclass.storage.k8s.io/persistentvolumeclaims  2     3

=> Once the 2 volumes are created, we can see the that the PVC count has increased.

# kubectl create -f pvc-sc3-3.yaml -n scenario3
persistentvolumeclaim "sc3-3" created

# kubectl describe quota pvc-count-limit -n scenario3
Name:                                                                 pvc-count-limit
Namespace:                                                            scenario3
Resource                                                              Used  Hard
--------                                                              ----  ----
persistentvolumeclaims                                                3     5
storage-class-nas.storageclass.storage.k8s.io/persistentvolumeclaims  3     3

=> the limit has now been reached

# kubectl create -f pvc-sc3-4.yaml -n scenario3
Error from server (Forbidden): error when creating "pvc-sc3-4.yaml": persistentvolumeclaims "sc3-4" is forbidden: exceeded quota: pvc-count-limit, requested: storage-class-nas.storageclass.storage.k8s.io/persistentvolumeclaims=1, used: storage-class-nas.storageclass.storage.k8s.io/persistentvolumeclaims=3, limited: storage-class-nas.storageclass.storage.k8s.io/persistentvolumeclaims=3

=> since the limit has been reached for the Storage Class 'storage-class-nas', we cannot request new PVCs anymore


E. Clean up the 4 PVC before moving on

# kubectl delete pvc -n scenario3 sc3-1
persistentvolumeclaim "sc3-1" deleted
# kubectl delete pvc -n scenario3 sc3-2
persistentvolumeclaim "sc3-2" deleted
# kubectl delete pvc -n scenario3 sc3-3
persistentvolumeclaim "sc3-3" deleted


F. Play around with Capacity Quotas

# kubectl create -n scenario3 -f pvc-5Gi-1.yaml
persistentvolumeclaim "5gb-1" created

# kubectl describe quota sc-resource-limit -n scenario3
Name:                                                           sc-resource-limit
Namespace:                                                      scenario3
Resource                                                        Used  Hard
--------                                                        ----  ----
requests.storage                                                5Gi   10Gi
storage-class-nas.storageclass.storage.k8s.io/requests.storage  5Gi   8Gi

=> Once the first volume is created, we can see the that the Resource count has increased.

# kubectl create -n scenario3 -f pvc-5Gi-2.yaml
Error from server (Forbidden): error when creating "pvc-5Gi-2.yaml": persistentvolumeclaims "5gb-2" is forbidden: exceeded quota: sc-resource-limit, requested: storage-class-nas.storageclass.storage.k8s.io/requests.storage=5Gi, used: storage-class-nas.storageclass.storage.k8s.io/requests.storage=5Gi, limited: storage-class-nas.storageclass.storage.k8s.io/requests.storage=8Gi

=> Creating a new 5Gi PVC would lead to be above the aforementioned limit. The PVC request will then fail.


E. Clean up
# kubectl delete pvc 5gb-1 -n scenario3
persistentvolumeclaim "5gb-1" deleted
# kubectl delete namespace scenario3
namespace "scenario3" deleted
