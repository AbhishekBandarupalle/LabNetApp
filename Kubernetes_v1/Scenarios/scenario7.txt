############################################################################
#
# SCENARIO 7: Application Migration from Docker to Kubernetes
#
############################################################################

GOAL:
This scenario can be used to demonstrate how to import volumes into Kubernetes.
Volume Import is useful for several use cases, including App migration, DR, ...
In this exercise, we will build an Apache environment running in Docker and "migrate" the app to Kubernetes

The files used in the scenario are all in the directory: https://github.com/YvosOnTheHub/LabNetApp/tree/master/Kubernetes/Scenarios/Scenario7.

Prerequisites:
- Trident v19.04 is already installed & configured
- Trident for Docker is configured with the backend file Docker_config_import.json
- Trident for Kubernetes is configured with the backend file k8s_backend-nas-import.json
- a Storage Class is configured in Kubernetes using the file k8s_sc-import-nas.yaml


A. Check the environment configuration

== DOCKER
[root@rhel5 netappdvp]# docker plugin ls
ID                  NAME                DESCRIPTION                             ENABLED
fe248f8da3d6        netapp:latest       Trident - NetApp Docker Volume Plugin   true

== KUBERNETES
[root@rhel3 Kubernetes]# tridentctl get backend -n trident
+------------+----------------+--------+---------+
|    NAME    | STORAGE DRIVER | STATE  | VOLUMES |
+------------+----------------+--------+---------+
| NAS-Import | ontap-nas      | online |       0 |
+------------+----------------+--------+---------+

[root@rhel3 Kubernetes]# kubectl get sc
NAME                       PROVISIONER         AGE
storage-class-nas-import   netapp.io/trident   1m


B. Create the persistent volume & the container in Docker

[root@rhel5 netappdvp]# docker volume create -d netapp --name data -o size=1g
data

[root@rhel5 netappdvp]# docker volume ls
DRIVER              VOLUME NAME
netapp:latest       data

For this exercise, I will choose the port 30080, but you could choose your own number.

[root@rhel5 import]# docker run -d --name apache_migration -v data:/var/www/html -p 30080:80 php:7.0-apache
Unable to find image 'php:7.0-apache' locally
7.0-apache: Pulling from library/php
177e7ef0df69: Pull complete
...
e1062fd0605a: Pull complete
Digest: sha256:1d34b2e491a02ba7a8d26478132015e197a5ffea37f0a93b42621d11cfe042cc
Status: Downloaded newer image for php:7.0-apache
63c8729025dc9827a9ad1fafed62f15a23f4bc7d534aee02a83ff20b946f1244

[root@rhel5 import]# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES
63c8729025dc        php:7.0-apache      "docker-php-entryp..."   22 seconds ago      Up 21 seconds       0.0.0.0:30080->80/tcp   apache_migration


C. Apache server content & connection

Now that Apache is running, let's put some content in its persistent volume.
For this, I will mount its volume (import_volume) on my environment, and copy the files available in the Apache directory.

It's time to verify that you can see some content on this Apache server on the port 30080


D. Migration to Kubernetes.

We will now stop our application, and restart an Apache environment in Kubernetes, which will use the very same volume created earlier.

== DOCKER
[root@rhel5 import]# docker stop apache_migration
apache_migration

[root@rhel5 import]# docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES
63c8729025dc        php:7.0-apache      "docker-php-entryp..."   2 hours ago         Exited (0) 2 seconds ago                       apache_migration

Let's import the volume using the PVC definition file.
== KUBERNETES
[root@rhel3 Kubernetes]# tridentctl -n trident import volume NAS-Import import_data -f k8s_pvc-nas-import.yaml
+--------------------+---------+--------------------------+----------+------------+------+
|        NAME        |  SIZE   |      STORAGE CLASS       | PROTOCOL |  BACKEND   | POOL |
+--------------------+---------+--------------------------+----------+------------+------+
| default-data-110dd | 1.0 GiB | storage-class-nas-import | file     | NAS-Import |      |
+--------------------+---------+--------------------------+----------+------------+------+

We can now create the application in Kubernetes & the services associated.
[root@rhel3 Scenario5]# kubectl create -f k8s_deployment-apache.yaml
deployment.apps "apache" created

[root@rhel3 Scenario5]# kubectl create -f k8s_svc-apache.yaml
service "apache" created

Let's check everything is ok:
[root@rhel3 Scenario5]# kubectl get deployment -o wide
NAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE       CONTAINERS   IMAGES           SELECTOR
apache    1         1         1            1           42s       apache       php:7.0-apache   app=apache

[root@rhel3 Scenario5]# kubectl get pod
NAME                      READY     STATUS    RESTARTS   AGE
apache-85f78cc4cb-7gk6h   1/1       Running   0          1m

[root@rhel3 Scenario5]# kubectl get svc apache
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
apache       NodePort    10.100.218.168   <none>        80:30080/TCP   21s

Now, if everything went well, you can connect to your Kubernetes cluster on the port 30080, and you will access your freshly migrated Apache server.




